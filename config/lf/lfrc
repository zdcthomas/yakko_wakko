# interpreter for shell commands (needs to be POSIX compatible)
set shell sh
set shellopts '-eu'
set hidden
set ifs "\n"
set scrolloff 10
set previewer ~/.config/lf/pv.sh

$mkdir -p ~/.trash

cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd clone ${{
   git clone $1
}}

cmd dmux ${{
    dmux .
}}

cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}


cmd trash $IFS="`printf '\n\t'`"; mv $fx ~/.trash

cmd mkdir %mkdir "$@"

cmd touch %touch "$@"

cmd toggle_view &{{
  if [ "$lf_ratios" = "1" ]; then
    lf -remote "send $id set ratios 1:2:3"
    lf -remote "send $id set preview"
  else
    lf -remote "send $id set nopreview"
    lf -remote "send $id set ratios 1"
  fi
}}

# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd fzf_jump ${{
   res="$(find . -maxdepth 3 | fzf --height="100%" --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"                                                       
   fi
lf -remote "send $id $cmd \"$res\""
}}

map / :fzf_jump
map <enter> open
map <esc> unselect
map D delete
map X !$f
map d cut
map o push :touch<space>
map t dmux
map u clear
map x $$f
map ~ toggle_view
map <delete> delete
map O push :mkdir<space>
